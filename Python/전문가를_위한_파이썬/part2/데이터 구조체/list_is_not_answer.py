# 2.9 리스트가 답이 아닐 때
## 리스트형(list)은 융통성 있고 사용하기 편하지만, 세부 요구사항에 따라 더 나은 자료형도 있다.
## 예를 들어 실수를 `천만 개 저장해야 할 때는 배열(array)이 훨씬 더 효율적`이다.
## `배열은 모든 기능을 갖춘 float 객체 대신 C언어의 배열과 마찬가지로 기계가 사용하는 형태로 표현된 바이트 값만 저장하기 때문이다.`
## `한편 리스트의 양쪽 끝에 항목을 계속 추가하거나 삭제하면서 FIFO나 LIFO 데이터 구조를 구현할 때는 덱(deque; 양쪽을 사용하는 큐)가 더 빠르다.`
## set(튜플) 형은 항목이 들어 있는지 검사하는 과정이 최적화되어 있다.

# 2.9.1 배열
## 리스트 안에 `숫자만 들어 있다면 배열(array.array)이 리스트보다 훨씬 더 효율적`이다.
## 배열은 pop(), insert(), extend() 등을 포함해서 가변 시퀀스가 제공하는 모든 연산을 지원하며, 
## 빠르게 파일에 저장하고 읽어올 수 있는  frombytes()와 tofile() 메서드도 추가로 제공한다.
## 파이썬 배열은 C 배열 만큼 가볍다. / C기반 형을 결정하는 문자일 타입코드(typecode)를 지정한다.

## 2-20 커다란 실수 배열의 생성, 저장, 로딩
### 숫자의 경우 배열 사용
### 객체를 바이트로 변환하는 이유는 주로 데이터를 저장하거나 전송하기 위함이다.
### 바이트로 변환된 데이터는 메모리나 디스크에 저장할 수 있고, 네트워크를 통해 전송할 수도 있다.
### `바이트 형식은 텍스트보다 효율적이고 속도가 빠르며, 데이터의 유형에 관계없이 일관된 방식으로 처리`될 수 있다.
### 객체를 바이트로 변환하는 것은 데이터의 저장, 전송, 공유를 용이하게 하고,
### 객체를 다양한 환경에서 사용할 수 있도록 하는 중요한 과정이다.
from array import array
from random import random


floats = array('d', (random() for i in range(10**7)))  # 배열 생성
print(floats[-1])

fp = open('floats.bin', 'wb')
floats.tofile(fp)  # 생성 된 배열 floats.bin 에 저장
floats.close()

floats2 = array('d')
fp = open('floats.bin', 'rb')
floats2.fromfile(fp, 10**7)  # 로딩
fp.close()
print(floats2[-1])

print(floats == floats2)  # True

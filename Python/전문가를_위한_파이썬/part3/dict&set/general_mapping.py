# 3 딕셔너리와 집합
## 프로그램 코드 안에서 명시적으로 딕셔너리를 사용하고 있지 않더라도, 모든 파이썬 프로그램에서는 여러 딕셔너리가 동시에 활동하고 있다.

## dict형은 애플리케이션에서 널리 사용될 뿐만 아니라 파이썬 구현의 핵심 부분이기도 하다.
## 모듈 네임스페이스, 클래스 및 인스턴스 속성, 함수의 키워드 인수 등 핵심 부분에 딕셔너리가 사용되고 있다.
## 내장 함수들은 __builtins__.__dict__ 에 있다.

## 중요한 역할을 맡고 있으므로 파이썬 dict 클래스는 상당히 최적화되어 있다.
##* 파이썬의 고성능 딕셔너리 뒤에는 `해시 테이블`이라는 엔진이 있다.

# 3.1 일반적인 매핑형
## collections.abc 모듈은 dict 및 이와 유사한 자료형의 인터페이스를 정의하기 위해 Mapping 및 MutableMapping 추상 베이스 클래스(ABC) 를 제공한다.
dic = {}
import collections
isinstance(dic, collections.abc.Mapping)  # True
## 표준 라이브러리에서 제공하는 매핑형은 모두 dict를 이용해서 구현하므로,
## 키가 `해시 가능` 해야 한다는 제한을 갖고 있다. (값은 해시 가능할 필요 없고, 키만 해시 가능하면 된다.)

##* _해시 가능하다(hashable) 는 말의 의미는?_
### 수명 주기 동안 결코 변하지 않는 해시값을 갖고 있고(__hash__() 메서드가 필요하다)
### 다른 객체와 비교할 수 있으면 (__eq__() 메서드가 필요하다.)
### 객체를 해시 가능하다고 한다. 동일하다고 판단되는 객체는 반드시 해시값이 동일해야 한다.
### 원자적 불변형(str, byte, 수치형)은 모두 해시 가능하다. frozenset은 언제나 해시 가능하다.
### 모든 요소가 해시 가능하도록 정의되어 있기 떄문이다. 튜플은 들어 있는 항목들이 모두 해시 가능해야 해시 가능하다.
tt = (1, 2, (30, 40))
hash(tt)
t1 = (1, 2, [30, 40])
hash(t1)  # TypeError: unhashable type: 'list'
tf = (1, 2, frozenset([30, 40]))
hash(tf)

### 다양한 방식으로 dict 구현
a = dict(one=1, two=2, three=3)
b = {'one': 1, 'two': 2, 'three': 3}
c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
d = dict([('two', 2), ('one', 1), ('three', 3)])
e = dict({'three': 3, 'one': 1, 'two': 2})
a == b == c == d == e  # True
